#are there any participants who did it repeatedly?
invalid_trials %>% select(Participant,valid) %>% table() -> invalid_ppts
#remove invalid trials
left_join(tdat, invalid_trials) %>% filter(valid==1) -> tdat
########
#AUDIO DURATIONS
########
#join the times for each trial that audio starts
tdat %>%
group_by(Participant, Trial) %>%
summarise(
audio1_start = Elapsed[`Event Type`=="playbackstart"]
) %>%
left_join(tdat, .) %>% print() -> tdat
#get the timings for each audio file.
audio<-read_csv("audio_durations.csv",col_names=c("file","duration")) %>%
#these were just from soxi -D for all files, so I only want the initial fragments (and not the practice)
filter(grepl("1.wav",file),!grepl("p1.wav",file)) %>%
mutate(
audio1_duration=duration*1000,
Condition=ifelse(grepl("f1.wav",file),"Fluent",
ifelse(grepl("d1.wav",file),"Disfluent","Filler")),
item=ifelse(Condition=="Filler",substring(file,3,nchar(file)-6),substring(file,3,nchar(file)-7))
) %>% select(audio1_duration,item,Condition) %>% print()
#join audio durations and make time variable centered on referent onset.
left_join(tdat, audio) %>%
mutate(
audio1_end = audio1_start+audio1_duration,
time = Elapsed-audio1_end
) -> tdat
####FILTER TO CRITICAL TRIALS
tdat %<>% filter(Condition!="Filler")
########
#MOVEMENTS BEYOND OUTER EDGE
########
#what is the outer edge of the image?
#center of image is 0.15*1024
#so outside edge is 0.15*1024-(150/2)
#relative to screen center, this is 512-(0.15*1024-(150/2))
outer_edge = 512-(0.15*1024-(150/2))
tdat %<>% mutate(
outside = factor(ifelse(abs(X)>outer_edge,1,0))
)
#how many samples?
tdat %>% filter(`Event Category`=="mouse", time >= 0) %>% select(outside) %>% table() %>% prop.table()
#get rid of them.
tdat %<>% filter(outside==0, `Event Category`=="mouse")
########
#CHECK OBJ CLICKED
########
tdat %>%
group_by(Participant, Trial) %>%
summarise(
fluency = first(Condition),
refpos = first(refpos),
rt = last(time[`Event Type`=="click"]),
clickedLR = last(Layer[`Event Type`=="click"]),
clicked = ifelse(!(grepl("left|right",clickedLR)),"none",
ifelse(grepl("left",clickedLR) & refpos=="L","ref",
ifelse(grepl("right",clickedLR) & refpos=="R","ref","dis")))
) -> object_clicks
View(object_clicks)
left_join(tdat, object_clicks) %>% filter(rt>=200, clicked!="none") -> tdat
View(tdat)
########
#BINNING THE DATA
########
#okay, so we need to bin the data. I don't know if there's a nice equivalent of padr::pad() for numeric vector.
#there must be, but I can't find it.
#round the timestamps to the nearest 20, and then average the X,Y positions
tdat %>% select(Participant,Trial,Condition,X,Y,time) %>%
mutate(
time=jkr::mround(time,20)
) %>% group_by(Participant, Trial,time) %>%
summarise(
X=mean(X),
Y=mean(Y)
) -> xy_data
#now create an empty data set for each trial for each ppt, with rows from min to max time in each trial by 20ms
tdat %>% mutate(
time=jkr::mround(time,20)
) %>% group_by(Participant, Trial) %>%
summarise(
time=list(seq(min(time),max(time),20))
) %>% unnest() %>%    #i love the unnest function!
left_join(., xy_data) %>%     #join with data.
fill(.,c("X","Y")) %>%      #fill out X and Y values with most recent value.
filter(time>=0) %>%         #remove all movements prior to referent onset.
print() -> tdat_binned
########
#CALCULATE DISTANCE TRAVELLED & CUMULATIVE DISTANCE & TOWARDS REF/DIS
########
#make distances
tdat_binned %>%
group_by(Participant,Trial) %>%
summarise(
time = list(time[-c(1)]),
x = list(X[-c(1)]),
distance_travelled = list(diff(X,lag=1)),
cumulative_distance = list(cumsum(abs(diff(X,lag=1))))
) %>% unnest() %>%
left_join(tdat_binned,.) %>% print() -> tdat_binned
#sort out whether distance travelled is toward ref or dis
tdat %>% select(Participant, Trial, Condition, refpos) %>% unique() %>%
left_join(tdat_binned, .) %>%
mutate(
Ldist = ifelse(distance_travelled<=0,abs(distance_travelled),0),
Rdist = ifelse(distance_travelled>=0,distance_travelled,0),
ref_dist = ifelse(refpos=="L",Ldist,Rdist),
dis_dist = ifelse(refpos=="L",Rdist,Ldist)
) -> tdat_binned
tdat_binned %>%
filter(!is.na(x)) %>%
group_by(Participant, Trial) %>%
summarise(
time = list(time),
ref_cdist = list(cumsum(ref_dist)),
dis_cdist = list(cumsum(dis_dist))
) %>% unnest() %>%
left_join(tdat_binned, .) %>% print() -> tdat_binned
#replace the NAs created at time==0 with 0.
tdat_binned %<>% mutate_at(vars(contains("dist")),funs(ifelse(time==0,0,.)))
tdat_binned %<>%
mutate(
refprop = ifelse(cumulative_distance==0,0,ref_cdist/cumulative_distance),
disprop = ifelse(cumulative_distance==0,0,dis_cdist/cumulative_distance)
)
########
#PLOT
########
require(jkr)
tdat_binned %>%
mutate(
CURRENT_BIN = time/20,
group=factor("1")
) %>% as.data.frame() %>%
make_tcplot_data(.,AOIs=c("refprop","disprop"),predictor = "Condition") %>%
tcplot_nolines(.,0,1000)+facet_wrap(~Condition)
object_clicks %<>% filter(clicked!="none",rt>=200)
#contrasts(aggdat$fluency)<-c(-.5,.5)
OC_model <- glmer(clicked)
View(object_clicks)
object_clicks$fluency
tdat %>%
group_by(Participant, Trial) %>%
summarise(
fluency = factor(first(Condition)),
refpos = first(refpos),
rt = last(time[`Event Type`=="click"]),
clickedLR = last(Layer[`Event Type`=="click"]),
clicked = ifelse(!(grepl("left|right",clickedLR)),"none",
ifelse(grepl("left",clickedLR) & refpos=="L","ref",
ifelse(grepl("right",clickedLR) & refpos=="R","ref","dis")))
) -> object_clicks
View(object_clicks)
object_clicks %<>% filter(clicked!="none",rt>=200)
object_clicks$fluency
head(object_clicks)
contrasts(object_clicks$clicked)
########
#CHECK OBJ CLICKED
########
tdat %>%
group_by(Participant, Trial) %>%
summarise(
fluency = factor(first(Condition)),
refpos = first(refpos),
rt = last(time[`Event Type`=="click"]),
clickedLR = last(Layer[`Event Type`=="click"]),
clicked = factor(ifelse(!(grepl("left|right",clickedLR)),"none",
ifelse(grepl("left",clickedLR) & refpos=="L","ref",
ifelse(grepl("right",clickedLR) & refpos=="R","ref","dis"))))
) -> object_clicks
contrasts(object_clicks$clicked)
head(object_clicks)
OC_model <- glmer(clicked~fluency+(1+fluency|Participant)+(1+fluency|Trial),object_clicks, family="binomial")
jkr::mround
mround<-function (x, base) {base * round(x/base)}
require(tidyverse)
all_images = list.files("images")
dist_images = all_images[grepl("^d",all_images)]
targ_images = all_images[grepl("^t",all_images)]
fill_targ_images = all_images[grepl("^fr",all_images)]
critical_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
fconditions = c("FillerL","FillerR")
expand.grid(critical_items,conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
) -> grouplists
grouplists %>% select(group,Condition) %>% table()
expand.grid(filler_items,fconditions,1:2) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>% select(-Var3) %>%
mutate(
group = c(rep(1:4,10),rep(c(2:4,1),10),rep(c(3,4,1,2),10),rep(c(4,1:3),10))
) -> fgrouplists
fgrouplists %>% select(group, Condition) %>% table()
all_images = list.files("~/Desktop/mousetrack_achive/images")
dist_images = all_images[grepl("^d",all_images)]
targ_images = all_images[grepl("^t",all_images)]
fill_targ_images = all_images[grepl("^fr",all_images)]
critical_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
fconditions = c("FillerL","FillerR")
expand.grid(critical_items,conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
) -> grouplists
grouplists %>% select(group,Condition) %>% table()
expand.grid(filler_items,fconditions,1:2) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>% select(-Var3) %>%
mutate(
group = c(rep(1:4,10),rep(c(2:4,1),10),rep(c(3,4,1,2),10),rep(c(4,1:3),10))
) -> fgrouplists
fgrouplists %>% select(group, Condition) %>% table()
everything <- bind_rows(grouplists, fgrouplists)
everything %>% filter(group==1) %>% select(-group) -> group1
everything %>% filter(group==2) %>% select(-group) -> group2
everything %>% filter(group==3) %>% select(-group) -> group3
everything %>% filter(group==4) %>% select(-group) -> group4
nParticipants = 32
nConditions = 4
ppt_conditions=data.frame(list())
for(j in 1:(nParticipants/nConditions)){
everything %>% mutate(Condition=paste0(group,"_",j,Condition)) %>%
select(-group) %>%
bind_rows(ppt_conditions, .) -> ppt_conditions
}
layers = c("image-left","image-right","audio","text")
ppt_conditions_layers=data.frame(list())
ppt_conditions_layers %>% arrange(Trial) %>%
mutate(
ppt = gsub("Fluent|Disfluent|Filler|R|L","",Condition),
Value = ifelse(grepl("FluentL|DisfluentL",Condition) & Layer=="image-left",paste0("t_",Trial,".png"),
ifelse(grepl("FluentR|DisfluentR",Condition) & Layer=="image-right",paste0("t_",Trial,".png"),
ifelse(grepl("FillerL",Condition) & Layer=="image-left",paste0("fr_",Trial,".png"),
ifelse(grepl("FillerR",Condition) & Layer=="image-right",paste0("fr_",Trial,".png"),
ifelse(grepl("Filler",Condition) & Layer=="audio",paste0("f_",Trial,"_.wav"),
ifelse(grepl("Fluent",Condition) & Layer=="audio",paste0("e_",Trial,"_f.wav"),
ifelse(grepl("Disfluent",Condition) & Layer=="audio",paste0("e_",Trial,"_d.wav"),
ifelse(Layer=="text","",NA))))))))
) -> ppt_conditions_layers
require(tidyverse)
all_images = list.files("~/Desktop/mousetrack_achive/images")
dist_images = all_images[grepl("^d",all_images)]
targ_images = all_images[grepl("^t",all_images)]
fill_targ_images = all_images[grepl("^fr",all_images)]
critical_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
fconditions = c("FillerL","FillerR")
expand.grid(critical_items,conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
) -> grouplists
grouplists %>% select(group,Condition) %>% table()
expand.grid(filler_items,fconditions,1:2) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>% select(-Var3) %>%
mutate(
group = c(rep(1:4,10),rep(c(2:4,1),10),rep(c(3,4,1,2),10),rep(c(4,1:3),10))
) -> fgrouplists
fgrouplists %>% select(group, Condition) %>% table()
everything <- bind_rows(grouplists, fgrouplists)
everything %>% filter(group==1) %>% select(-group) -> group1
everything %>% filter(group==2) %>% select(-group) -> group2
everything %>% filter(group==3) %>% select(-group) -> group3
everything %>% filter(group==4) %>% select(-group) -> group4
nParticipants = 32
nConditions = 4
ppt_conditions=data.frame(list())
for(j in 1:(nParticipants/nConditions)){
everything %>% mutate(Condition=paste0(group,"_",j,Condition)) %>%
select(-group) %>%
bind_rows(ppt_conditions, .) -> ppt_conditions
}
layers = c("image-left","image-right","audio","text")
ppt_conditions_layers=data.frame(list())
for(j in layers){
ppt_conditions %>% mutate(Layer=j) %>%
bind_rows(ppt_conditions_layers, .) -> ppt_conditions_layers
}
ppt_conditions_layers %>% arrange(Trial) %>%
mutate(
ppt = gsub("Fluent|Disfluent|Filler|R|L","",Condition),
Value = ifelse(grepl("FluentL|DisfluentL",Condition) & Layer=="image-left",paste0("t_",Trial,".png"),
ifelse(grepl("FluentR|DisfluentR",Condition) & Layer=="image-right",paste0("t_",Trial,".png"),
ifelse(grepl("FillerL",Condition) & Layer=="image-left",paste0("fr_",Trial,".png"),
ifelse(grepl("FillerR",Condition) & Layer=="image-right",paste0("fr_",Trial,".png"),
ifelse(grepl("Filler",Condition) & Layer=="audio",paste0("f_",Trial,"_.wav"),
ifelse(grepl("Fluent",Condition) & Layer=="audio",paste0("e_",Trial,"_f.wav"),
ifelse(grepl("Disfluent",Condition) & Layer=="audio",paste0("e_",Trial,"_d.wav"),
ifelse(Layer=="text","",NA))))))))
) -> ppt_conditions_layers
View(ppt_conditions_layers)
for(j in levels(factor(ppt_trials$ppt))){
ppt_trials$distractors[ppt_trials$ppt==j]<-base::sample(dist_images)
}
head(ppt_trials)
left_join(ppt_conditions_layers,ppt_trials) %>% mutate(
Value = ifelse(is.na(Value),distractors,Value)
) %>% select(-distractors,ppt) -> ppt_conditions_layers
printTrials=function(fulldata){
for(j in unique(fulldata$Trial)){
trialsdata <- fulldata %>% filter(Trial==j)
cat(paste0('\t\t{\n\t\t\t"name": "',j,'",\n\t\t\t"conditions": [\n\t\t\t\t'))
for(m in unique(trialsdata$Condition)){
cat(paste0('
\t\t\t\t{
\t\t\t\t\t"name": "',m,'",
\t\t\t\t\t"variables": [
\t\t\t\t\t\t{
\t\t\t\t\t\t\t"layer": "image-left",
\t\t\t\t\t\t\t"value": "',trialsdata$Value[trialsdata$Condition==m & trialsdata$Layer=="image-left"],'"
\t\t\t\t\t\t},
\t\t\t\t\t\t{
\t\t\t\t\t\t\t"layer": "image-right",
\t\t\t\t\t\t\t"value": "',trialsdata$Value[trialsdata$Condition==m & trialsdata$Layer=="image-right"],'"
\t\t\t\t\t\t},
\t\t\t\t\t\t{
\t\t\t\t\t\t\t"layer": "audio",
\t\t\t\t\t\t\t"value": "',trialsdata$Value[trialsdata$Condition==m & trialsdata$Layer=="audio"],'"
\t\t\t\t\t\t},
\t\t\t\t\t\t{
\t\t\t\t\t\t\t"layer": "text",
\t\t\t\t\t\t\t"value": " "
\t\t\t\t\t\t}
\t\t\t\t\t]
\t\t\t\t},'))
}
cat(paste0('
\t\t\t]
\t\t},\n'))
}
}
printTrials(ppt_conditions_layers)
require(tidyverse)
all_images = list.files("~/Desktop/mousetrack_achive/images")
dist_images = all_images[grepl("^d",all_images)]
targ_images = all_images[grepl("^t",all_images)]
fill_targ_images = all_images[grepl("^fr",all_images)]
critical_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
fconditions = c("FillerL","FillerR")
expand.grid(critical_items,conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
) -> grouplists
grouplists %>% select(group,Condition) %>% table()
expand.grid(filler_items,fconditions,1:2) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>% select(-Var3) %>%
mutate(
group = c(rep(1:4,10),rep(c(2:4,1),10),rep(c(3,4,1,2),10),rep(c(4,1:3),10))
) -> fgrouplists
fgrouplists %>% select(group, Condition) %>% table()
everything <- bind_rows(grouplists, fgrouplists)
everything %>% filter(group==1) %>% select(-group) -> group1
everything %>% filter(group==2) %>% select(-group) -> group2
everything %>% filter(group==3) %>% select(-group) -> group3
everything %>% filter(group==4) %>% select(-group) -> group4
nParticipants = 32
nConditions = 4
ppt_conditions=data.frame(list())
for(j in 1:(nParticipants/nConditions)){
everything %>% mutate(Condition=paste0(group,"_",j,Condition)) %>%
select(-group) %>%
bind_rows(ppt_conditions, .) -> ppt_conditions
}
layers = c("image-left","image-right","audio")
ppt_conditions_layers=data.frame(list())
for(j in layers){
ppt_conditions %>% mutate(Layer=j) %>%
bind_rows(ppt_conditions_layers, .) -> ppt_conditions_layers
}
ppt_conditions_layers %>% arrange(Trial) %>%
mutate(
ppt = gsub("Fluent|Disfluent|Filler|R|L","",Condition),
Value = ifelse(grepl("FluentL|DisfluentL",Condition) & Layer=="image-left",paste0("t_",Trial,".png"),
ifelse(grepl("FluentR|DisfluentR",Condition) & Layer=="image-right",paste0("t_",Trial,".png"),
ifelse(grepl("FillerL",Condition) & Layer=="image-left",paste0("fr_",Trial,".png"),
ifelse(grepl("FillerR",Condition) & Layer=="image-right",paste0("fr_",Trial,".png"),
ifelse(grepl("Filler",Condition) & Layer=="audio",paste0("f_",Trial,"_.wav"),
ifelse(grepl("Fluent",Condition) & Layer=="audio",paste0("e_",Trial,"_f.wav"),
ifelse(grepl("Disfluent",Condition) & Layer=="audio",paste0("e_",Trial,"_d.wav"),NA)))))))
) -> ppt_conditions_layers
ppt_conditions_layers %>% select(ppt,Trial) %>% distinct() %>% arrange(ppt) -> ppt_trials
for(j in levels(factor(ppt_trials$ppt))){
ppt_trials$distractors[ppt_trials$ppt==j]<-base::sample(dist_images)
}
head(ppt_trials)
left_join(ppt_conditions_layers,ppt_trials) %>% mutate(
Value = ifelse(is.na(Value),distractors,Value)
) %>% select(-distractors,ppt) -> ppt_conditions_layers
printTrials(ppt_conditions_layers)
sink("output_trials.txt")
cat(paste0('\t"trials": [\n'))
printTrials(ppt_conditions_layers)
cat(paste0('\n\t],'))
sink()
printList=function(trials,listname){
prefix=paste0('		{\n\t\t\t"name": "',listname,'",\n\t\t\t"trials": [\n')
lists = trials[sample(1:nrow(trials)),] %>%
mutate(
cc = paste0('				"',Trial,':',listname,Condition,'",\n')
) %>% pull(cc)
suffix = '\t\t\t]\n\t\t},\n'
cat(prefix)
cat(lists)
cat(suffix)
}
printList(group1,"1_1")
group-1
group1
data.frame(
Trial=c("att:1","att:2","att:3","att:4"),
Condition=rep("attention",4)
)
attentiontrials<-data.frame(
Trial=c("att:1","att:2","att:3","att:4"),
Condition=rep("attention",4)
)
printList=function(trials,listname){
prefix=paste0('		{\n\t\t\t"name": "',listname,'",\n\t\t\t"trials": [\n')
trials2 = bind_rows(trials,attentiontrials)
lists = trials2[sample(1:nrow(trials2)),] %>%
mutate(
cc = paste0('				"',Trial,':',listname,Condition,'",\n')
) %>% pull(cc)
suffix = '\t\t\t]\n\t\t},\n'
cat(prefix)
cat(lists)
cat(suffix)
}
printList(group1,"1_1")
attentiontrials<-data.frame(
Trial=c("att1","att2","att3","att4"),
Condition=rep("attention",4)
)
printList=function(trials,listname){
prefix=paste0('		{\n\t\t\t"name": "',listname,'",\n\t\t\t"trials": [\n')
trials2 = bind_rows(trials,attentiontrials)
lists = trials2[sample(1:nrow(trials2)),] %>%
mutate(
cc = paste0('				"',Trial,':',listname,Condition,'",\n'),
cc = ifelse(grepl("attention",Condition),gsub(listname,cc),cc)
) %>% pull(cc)
suffix = '\t\t\t]\n\t\t},\n'
cat(prefix)
cat(lists)
cat(suffix)
}
printList(group1,"1_1")
printList=function(trials,listname){
prefix=paste0('		{\n\t\t\t"name": "',listname,'",\n\t\t\t"trials": [\n')
trials2 = bind_rows(trials,attentiontrials)
lists = trials2[sample(1:nrow(trials2)),] %>%
mutate(
cc = paste0('				"',Trial,':',listname,Condition,'",\n'),
cc = ifelse(grepl("attention",Condition),gsub(listname,"",cc),cc)
) %>% pull(cc)
suffix = '\t\t\t]\n\t\t},\n'
cat(prefix)
cat(lists)
cat(suffix)
}
printList(group1,"1_1")
printTrials(attentiontrials)
#add these.
sink("output_att_trials.txt")
cat(paste0('\t"trials": [\n'))
printTrials(attentiontrials)
cat(paste0('\n\t],'))
sink()
printList=function(trials,listname){
prefix=paste0('		{\n\t\t\t"name": "',listname,'",\n\t\t\t"trials": [\n')
trials2 = bind_rows(trials,attentiontrials)
lists = trials2[sample(1:nrow(trials2)),] %>%
mutate(
cc = paste0('				"',Trial,':',listname,Condition,'",\n'),
cc = ifelse(grepl("attention",Condition),gsub(listname,"",cc),cc)
) %>% pull(cc)
suffix = '\t\t\t]\n\t\t},\n'
cat(prefix)
cat(lists)
cat(suffix)
}
printList(group1,"1_1")
sink("output_lists.txt")
cat('\t"lists": [\n')
for (j in 1:(nParticipants/nConditions)){
printList(group1,paste0(1,"_",j))
printList(group2,paste0(2,"_",j))
printList(group3,paste0(3,"_",j))
printList(group4,paste0(4,"_",j))
}
cat('\t]')
sink()
5*50
