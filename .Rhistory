mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKtdat_binned<-tdat_binned %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKclicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
source("mousetrack_processing_LAB.R")
ppt_info <- ppt_info %>% mutate(
Participant=paste0("LAB_",Participant)
)
ppt_trial_info <- ppt_trial_info %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
tdat_binned <- tdat_binned %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
object_clicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("LAB_",Participant)
)
## JOIN
ppt_info <- bind_rows(MTURKppt_info, ppt_info) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
ppt_trial_info <- bind_rows(MTURKppt_trial_info, ppt_trial_info)  %>%
separate(Participant, c("cohort","Participant"),"_") %>%
left_join(.,ppt_info %>% select(total_trials,Participant,cohort)) %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
mtrack_data <- bind_rows(MTURKtdat_binned,tdat_binned) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
object_clicks<-bind_rows(MTURKclicks, object_clicks) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
rm(list=setdiff(ls(), c("ppt_info","ppt_trial_info","mtrack_data","object_clicks")))
ppt_info %>% mutate(
criterion1_total_trials55 = ifelse(total_trials>=55,1,0),
criterion1a_nonempty = ifelse(empty_trials>=55,1,0),
criterion2_crittrials15 = ifelse(crit_nonempty_trials>=10,1,0),
criterion3_attention_check2 = ifelse(att_check>=.5,1,0),
criterion4_pclick10 = ifelse(p_clickprenoun_nonempty<=10,1,0),
criterion5_Lsideclicks10 = ifelse(Lside_clicks>=.1 & Lside_clicks<=.9,1,0),
criterion6_avgclicktime200 = ifelse(avg_clicktime>=200,1,0)
) -> ppt_info_tab
criteria_vars=names(ppt_info_tab)[grepl("criterion",names(ppt_info_tab))]
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c(criteria_vars))
######
mtrack_data %<>% filter(bilingual2=="Monolingual",duplicate2="n-dup",include_ppt=="valid")
######
mtrack_data %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_info %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
object_clicks %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info  %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info <- bind_rows(MTURKppt_trial_info, ppt_trial_info)  %>%
separate(Participant, c("cohort","Participant"),"_") %>%
left_join(.,ppt_info %>% select(total_trials,Participant,cohort,bilingual2,duplicate2)) %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
require(lme4)
source("mousetrack_processing.R")
MTURKppt_info<-ppt_info %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKppt_trial_info<-ppt_trial_info %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKtdat_binned<-tdat_binned %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKclicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
source("mousetrack_processing_LAB.R")
ppt_info <- ppt_info %>% mutate(
Participant=paste0("LAB_",Participant)
)
ppt_trial_info <- ppt_trial_info %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
tdat_binned <- tdat_binned %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
object_clicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("LAB_",Participant)
)
## JOIN
ppt_info <- bind_rows(MTURKppt_info, ppt_info) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
ppt_trial_info <- bind_rows(MTURKppt_trial_info, ppt_trial_info)  %>%
separate(Participant, c("cohort","Participant"),"_") %>%
left_join(.,ppt_info %>% select(total_trials,Participant,cohort,bilingual2,duplicate2)) %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
mtrack_data <- bind_rows(MTURKtdat_binned,tdat_binned) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
object_clicks<-bind_rows(MTURKclicks, object_clicks) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
rm(list=setdiff(ls(), c("ppt_info","ppt_trial_info","mtrack_data","object_clicks")))
##########
ppt_info %>% mutate(
criterion1_total_trials55 = ifelse(total_trials>=55,1,0),
criterion2_crittrials15 = ifelse(crit_nonempty_trials>=10,1,0),
criterion3_attention_check2 = ifelse(att_check>=.5,1,0),
criterion4_pclick10 = ifelse(p_clickprenoun_nonempty<=10,1,0),
criterion5_Lsideclicks10 = ifelse(Lside_clicks>=.1 & Lside_clicks<=.9,1,0),
criterion6_avgclicktime200 = ifelse(avg_clicktime>=200,1,0)
) -> ppt_info_tab
criteria_vars=names(ppt_info_tab)[grepl("criterion",names(ppt_info_tab))]
ppt_info_tab %>% filter(cohort=="Mturk",duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,vars=c("bilingual2")) %>%
print(showAllLevels=T)
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c(criteria_vars))
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c("include_ppt"))
######
mtrack_data %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_info %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
object_clicks %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info  %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
###
ppt_info
ppt_info %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
######
mtrack_data %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
object_clicks %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info  %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info
require(lme4)
source("mousetrack_processing.R")
MTURKppt_info<-ppt_info %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKppt_trial_info<-ppt_trial_info %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKtdat_binned<-tdat_binned %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKclicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
source("mousetrack_processing_LAB.R")
ppt_info <- ppt_info %>% mutate(
Participant=paste0("LAB_",Participant)
)
ppt_trial_info <- ppt_trial_info %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
tdat_binned <- tdat_binned %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
object_clicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("LAB_",Participant)
)
## JOIN
ppt_info <- bind_rows(MTURKppt_info, ppt_info) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
ppt_trial_info <- bind_rows(MTURKppt_trial_info, ppt_trial_info)  %>%
separate(Participant, c("cohort","Participant"),"_") %>%
left_join(.,ppt_info %>% select(total_trials,Participant,cohort,bilingual2,duplicate2,include_ppt)) %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
mtrack_data <- bind_rows(MTURKtdat_binned,tdat_binned) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
object_clicks<-bind_rows(MTURKclicks, object_clicks) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
rm(list=setdiff(ls(), c("ppt_info","ppt_trial_info","mtrack_data","object_clicks")))
##########
ppt_info %>% mutate(
criterion1_total_trials55 = ifelse(total_trials>=55,1,0),
criterion2_crittrials15 = ifelse(crit_nonempty_trials>=10,1,0),
criterion3_attention_check2 = ifelse(att_check>=.5,1,0),
criterion4_pclick10 = ifelse(p_clickprenoun_nonempty<=10,1,0),
criterion5_Lsideclicks10 = ifelse(Lside_clicks>=.1 & Lside_clicks<=.9,1,0),
criterion6_avgclicktime200 = ifelse(avg_clicktime>=200,1,0)
) -> ppt_info_tab
criteria_vars=names(ppt_info_tab)[grepl("criterion",names(ppt_info_tab))]
ppt_info_tab %>% filter(cohort=="Mturk",duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,vars=c("bilingual2")) %>%
print(showAllLevels=T)
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c(criteria_vars))
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c("include_ppt"))
######
mtrack_data %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_info %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
object_clicks %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info  %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
###
###
ppt_trial_info %>% select(include_ppt,factor(rt>=200),factor(clicked!="none")) %>% summary
ppt_trial_info
###
ppt_trial_info %>% select(include_ppt,factor(clicktime>=200),factor(clicked!="none")) %>% summary
###
ppt_trial_info %>% select(include_trial) %>% table()
5265+71
5336/89
###
ppt_trial_info %>% mutate(
rtval=ifelse(clicktime>=200,1,0),
clickval=ifelse(clicked!="none",1,0),
datapoints=ifelse(datapoints!=0,1,0),
audio=ifelse(audio_played==1,1,0)
) %>% group_by(rtval,clickval,datapoints,audio) %>% count
###
ppt_trial_info %>% mutate(
rtval=ifelse(clicktime>=200 & !is.na(clicktime),1,0),
clickval=ifelse(clicked!="none",1,0),
datapoints=ifelse(datapoints!=0,1,0),
audio=ifelse(audio_played==1,1,0)
) %>% group_by(rtval,clickval,datapoints,audio) %>% count
require(lme4)
source("mousetrack_processing.R")
MTURKppt_info<-ppt_info %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKppt_trial_info<-ppt_trial_info %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKtdat_binned<-tdat_binned %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
MTURKclicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("Mturk_",Participant)
)
source("mousetrack_processing_LAB.R")
ppt_info <- ppt_info %>% mutate(
Participant=paste0("LAB_",Participant)
)
ppt_trial_info <- ppt_trial_info %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
tdat_binned <- tdat_binned %>% ungroup %>% mutate(
Participant=paste0("LAB_",Participant)
)
object_clicks<-object_clicks %>% ungroup %>%
mutate(
Participant=paste0("LAB_",Participant)
)
## JOIN
ppt_info <- bind_rows(MTURKppt_info, ppt_info) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
ppt_trial_info <- bind_rows(MTURKppt_trial_info, ppt_trial_info)  %>%
separate(Participant, c("cohort","Participant"),"_") %>%
left_join(.,ppt_info %>% select(total_trials,Participant,cohort,bilingual2,duplicate2,include_ppt)) %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
mtrack_data <- bind_rows(MTURKtdat_binned,tdat_binned) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
object_clicks<-bind_rows(MTURKclicks, object_clicks) %>%
separate(Participant, c("cohort","Participant"),"_") %>%
filter(
!(total_trials<=55 & cohort=="LAB"), #these 2 are Vilde,
!(cohort=="Mturk" & as.numeric(Participant)<=87) #these are the initial testing phase
)
rm(list=setdiff(ls(), c("ppt_info","ppt_trial_info","mtrack_data","object_clicks")))
##########
ppt_info %>% mutate(
criterion1_total_trials55 = ifelse(total_trials>=55,1,0),
criterion2_crittrials15 = ifelse(crit_nonempty_trials>=10,1,0),
criterion3_attention_check2 = ifelse(att_check>=.5,1,0),
criterion4_pclick10 = ifelse(p_clickprenoun_nonempty<=10,1,0),
criterion5_Lsideclicks10 = ifelse(Lside_clicks>=.1 & Lside_clicks<=.9,1,0),
criterion6_avgclicktime200 = ifelse(avg_clicktime>=200,1,0)
) -> ppt_info_tab
criteria_vars=names(ppt_info_tab)[grepl("criterion",names(ppt_info_tab))]
ppt_info_tab %>% filter(cohort=="Mturk",duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,vars=c("bilingual2")) %>%
print(showAllLevels=T)
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c(criteria_vars))
ppt_info_tab %>% filter(bilingual2=="Monolingual", duplicate2=="n-dup") %>%
tableone::CreateCatTable(data=.,strata="cohort",vars=c("include_ppt"))
######
mtrack_data %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_info %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
object_clicks %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
ppt_trial_info  %<>% filter(bilingual2=="Monolingual",duplicate2=="n-dup",include_ppt=="valid")
###
###
ppt_trial_info %>% mutate(
rtval=ifelse(clicktime>=200 & !is.na(clicktime),1,0),
clickval=ifelse(clicked!="none",1,0),
datapoints=ifelse(datapoints!=0,1,0),
audio=ifelse(audio_played==1,1,0)
) %>% group_by(rtval,clickval,datapoints,audio) %>% count
###
ppt_trial_info %>% mutate(
rtval=ifelse(clicktime>=200 & !is.na(clicktime),1,0),
clickval=ifelse(clicked!="none",1,0),
datapoints=ifelse(datapoints!=0,1,0),
audio=ifelse(audio_played==1,1,0)
) %>% group_by(rtval,clickval,datapoints,audio,cohort) %>% count
###
ppt_trial_info %>% mutate(
rtval=ifelse(clicktime>=200 & !is.na(clicktime),1,0),
clickval=ifelse(clicked!="none",1,0),
datapoints=ifelse(datapoints!=0,1,0),
audio=ifelse(audio_played==1,1,0)
) %>% group_by(cohort,rtval,clickval,datapoints,audio) %>% count
#how long did people take?
ppt_info %>%
group_by(cohort) %>%
summarise(
med_time=median(time_taken),
min_time=min(time_taken),
max_time=max(time_taken)
)
20*24
crit_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
crit_conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
all_images = list.files("~/Desktop/mousetrack_achive/images")
dist_images = all_images[grepl("^d",all_images)]
targ_images = all_images[grepl("^t",all_images)]
fill_targ_images = all_images[grepl("^fr",all_images)]
crit_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
crit_conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
filler_conditions = c("FillerL","FillerR")
expand.grid(crit_items,crit_conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
)
require(tidyverse)
expand.grid(crit_items,crit_conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
)
expand.grid(crit_items,crit_conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition)
all_images = list.files("~/Desktop/git_repositories/shire_ppls/construction/images/")
dist_images = all_images[grepl("^d",all_images)]
targ_images = all_images[grepl("^t",all_images)]
fill_targ_images = all_images[grepl("^fr",all_images)]
crit_items = gsub("t_|.png","",targ_images)
filler_items = gsub("fr_|.png","",fill_targ_images)
crit_conditions = c("FluentL","FluentR","DisfluentL","DisfluentR")
filler_conditions = c("FillerL","FillerR")
expand.grid(crit_items,crit_conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = c(rep(1:4,5),rep(c(2:4,1),5),rep(c(3,4,1,2),5),rep(c(4,1:3),5))
)
1:ncc
ncc=length(crit_conditions)
1:ncc
?combinat::permn()
combinat::permn(1:4)
combn(1:4)
combn(1:4,4)
combinat::permn(1:4)
combinat::permn(1:4)
expand.grid(1:4)
expand.grid(1:4,1:4)
expand.grid(1:4,2)
combinat::permn(1:4)
unique(combinat::permn(1:4))
combinat::permn(1:4) %>% unlist
combinat::permn(1:4) %>% unlist(recursive=F)
combinat::permn(1:4) %>% distinct
combinat::permn(1:4) %>% unique()
map(1:4,~c(.:4,1:.)
)
map(1:4,~c(.:4,1:(.-1))
)
map(1:4,~c(.:4,0:(.-1))
)
map(1:4,~c(.:4,0:(.-1)))
map(1:4,~c(.:4,1:(.-1)))
1:1
map(1:4,~c(.:4,1:(.-1)))[1:4]
map(1:4,~c(.:4,1:(.-1))) >%%
map(1:4,~c(.:4,1:(.-1))) %>% map(.,1:4)
map(1:4,~c(.:4,1:(.-1))) %>% map(.,[1:4])
map(1:4,~c(.:4,1:(.-1)))
map_dbl(1:4,~c(.:4,1:(.-1)))
map_df(1:4,~c(.:4,1:(.-1)))
map_dfr(1:4,~c(.:4,1:(.-1)))
map_at(1:4,~c(.:4,1:(.-1)))
map(1:4,~c(.:4,1:(.-1)))
map(1:4,~ifelse(.==1,1:4,c(.:4,1:(.-1))))
map(1:4,~ifelse(.x==1,1:4,c(.x:4,1:(.x-1))))
map(1:4,~ifelse(.x==1,1:4,0)
)
map(1:4,~ifelse(.x==1,c(1:4),0)
)
map(1:4,~ifelse(.==1,c(1:4),0)
)
map(1:4,~ifelse(.==1,"y",c(.:4,1:(.-1))))
map(1:4,~ifelse(.==1,"y",c(.x:4,1:(.x-1))))
map(1:4,~if(.==1){"y"}else{c(.x:4,1:(.x-1))})
map(1:4,~if(.==1){1:4}else{c(.x:4,1:(.x-1))})
map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>%
map(.,~rep(.,5))
map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>%
map(.,~rep(.,nci))
nci=length(crit_items)
nfi=length(filler_items)
map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>%
map(.,~rep(.,nci))
map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>%
map(.,~rep(.,nci/ncc))
map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>% map(.,~rep(.,nci/ncc)) %>% unlist
map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>% map(.,~rep(.,nfi/ncc)) %>% unlist
c(rep(1:4,10),rep(c(2:4,1),10),rep(c(3,4,1,2),10),rep(c(4,1:3),10))
make_ptlist<-function(crit_items,crit_conditions,filler_items,filler_conditions){
ncc=length(crit_conditions)
nfc=length(filler_conditions)
nci=length(crit_items)
nfi=length(filler_items)
expand.grid(crit_items,crit_conditions) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>%
mutate(
group = map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>% map(.,~rep(.,nci/ncc)) %>% unlist
) -> grouplists
expand.grid(filler_items,filler_conditions,1:2) %>%
rename(Trial = Var1,
Condition = Var2) %>% arrange(Trial,Condition) %>% select(-Var3) %>%
mutate(
group = map(1:ncc,~if(.==1){1:ncc}else{c(.x:ncc,1:(.x-1))}) %>% map(.,~rep(.,nfi/ncc)) %>% unlist
) -> fgrouplists
bind_rows(grouplists, fgrouplists)
}
make_ptlist
make_ptlist()
make_ptlist(crit_items,crit_conditions,filler_items,filler_conditions)
make_ptlist(crit_items,crit_conditions,filler_items,filler_conditions) %>% head
make_ptlist(crit_items,crit_conditions,filler_items,filler_conditions) %>% arrange(group)
make_ptlist(crit_items,crit_conditions,filler_items,filler_conditions) ->d
