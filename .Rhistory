clicked = factor(ifelse(!(grepl("left|right",clickedLR)),"none",
ifelse(grepl("left",clickedLR) & refpos=="L","ref",
ifelse(grepl("right",clickedLR) & refpos=="R","ref","dis"))))
) -> object_clicks
#object_clicks %>% ungroup() %>% select(clicked,fluency) %>% table()
left_join(tdat, object_clicks) -> tdat
########
#BINNING THE DATA
########
#okay, so we need to bin the data. I don't know if there's a nice equivalent of padr::pad() for numeric vector.
#there must be, but I can't find it.
#round the timestamps to the nearest 20, and then average the X,Y positions
tdat %>% filter(`Event Category`=="mouse") %>% select(Participant,Trial,Condition,X,Y,time) %>%
mutate(
time=mround(time,20)
) %>% group_by(Participant, Trial,time) %>%
summarise(
X=mean(X),
Y=mean(Y)
) -> xy_data
#now create an empty data set for each trial for each ppt, with rows from min to max time in each trial by 20ms
tdat %>% filter(!is.na(time)) %>%
mutate(
time=mround(time,20)
) %>% group_by(Participant, Trial) %>%
summarise(
time=list(seq(min(time),max(time),20))
) %>% unnest() %>%    #i love the unnest function!
left_join(., xy_data) %>%     #join with data.
fill(.,c("X","Y")) %>%      #fill out X and Y values with most recent value.
filter(time>=0) %>%         #remove all movements prior to referent onset.
print() -> tdat_binned
########
#CALCULATE DISTANCE TRAVELLED & CUMULATIVE DISTANCE & TOWARDS REF/DIS
########
#make distances
tdat_binned %>%
group_by(Participant,Trial) %>%
summarise(
time = list(time[-c(1)]),
x = list(X[-c(1)]),
distance_travelled = list(diff(X,lag=1)),
cumulative_distance = list(cumsum(abs(diff(X,lag=1))))
) %>% unnest() %>%
left_join(tdat_binned,.) %>% print() -> tdat_binned
#sort out whether distance travelled is toward ref or dis
tdat %>% select(Participant, Trial, Condition, refpos) %>% unique() %>%
left_join(tdat_binned, .) %>%
mutate(
Ldist = ifelse(distance_travelled<=0,abs(distance_travelled),0),
Rdist = ifelse(distance_travelled>=0,distance_travelled,0),
ref_dist = ifelse(refpos=="L",Ldist,Rdist),
dis_dist = ifelse(refpos=="L",Rdist,Ldist)
) -> tdat_binned
tdat_binned %>%
filter(!is.na(x)) %>%
group_by(Participant, Trial) %>%
summarise(
time = list(time),
ref_cdist = list(cumsum(ref_dist)),
dis_cdist = list(cumsum(dis_dist))
) %>% unnest() %>%
left_join(tdat_binned, .) %>% print() -> tdat_binned
#replace the NAs created at time==0 with 0.
tdat_binned %<>% mutate_at(vars(contains("dist")),funs(ifelse(time==0,0,.)))
tdat_binned %<>%
mutate(
refprop = ifelse(cumulative_distance==0,0,ref_cdist/cumulative_distance),
disprop = ifelse(cumulative_distance==0,0,dis_cdist/cumulative_distance)
)
####FILTERS
#EARLY EARLY CLICKS
#check that audio has begun playing in all trials (e.g. remove any who click immediately)
tdat %>%
group_by(Participant, Trial) %>%
summarise(
trialstart = first(`Trial Start`),
audio_played = +("playbackstart"%in%`Event Type`),
datapoints = sum(`Event Type`=="move"),
clicktime = last(time[`Event Type`=="click"]),
att_check = first(att_check),
clicked=first(clicked),
condition=first(Condition),
Browser = first(Browser),
Version=first(Version),
OS = first(OS)
) %>% print -> ppt_trial_info
#are there any participants who did it repeatedly?
ppt_trial_info %>% group_by(Participant) %>%
summarise(
total_trials = n_distinct(Trial),
empty_trials=sum(datapoints==0),
crit_trials = n_distinct(Trial[condition!="Filler"]),
crit_nonempty_trials = n_distinct(Trial[condition!="Filler" & datapoints!=0]),
att_check = first(att_check),
n_clickprenoun_nonempty = sum(!is.na(clicked) & datapoints!=0 & (clicktime<=0|audio_played==0),na.rm=T),
p_clickprenoun_nonempty = sum(!is.na(clicked) & datapoints!=0 & (clicktime<=0|audio_played==0),na.rm=T)/total_trials*100,
avg_clicktime = mean(clicktime,na.rm=T),
first_time1=as.POSIXct(as.integer(as.numeric(as.character(min(trialstart[trialstart>946684800
]))) / 1000.0), origin='1970-01-01', tz="GMT"),
last_time=as.POSIXct(as.integer(as.numeric(as.character(max(trialstart))) / 1000.0), origin='1970-01-01', tz="GMT"),
time_taken=difftime(last_time,first_time1,units="mins"),
Browser = first(Browser),
Version=first(Version),
OS = first(OS)
) %>% print -> ppt_info
qdata %>% filter(grepl("MTurk",Question)) %>% rename(
mturk_id = `Answers...`
) %>% group_by(Participant) %>%
summarise(mturk_id=first(mturk_id)) %>% right_join(.,ppt_info) %>%
mutate(
duplicate = duplicated(mturk_id)
) %>% print -> ppt_info
qdata %>% filter(grepl("language",Question)) %>% rename(
bilingual = `Answers...`
) %>% group_by(Participant) %>%
summarise(bilingual=first(bilingual)) %>% right_join(.,ppt_info) %>% print -> ppt_info
workers<-read_tsv("mturkers.csv") %>% filter(!is.na(`WORKER ID`)) %>% mutate(mturk_id=substring(`WORKER ID`,3))
workers  %>%
group_by(mturk_id) %>%
summarise(
nr_attempts = n(),
batches=gsub("mtrack_loy ","",toString(BATCH)),
comments=toString(COMMENTS)
) %>% filter(nr_attempts>1) -> dup_workers
# workers %>% mutate(
#   duplicate=duplicated(`WORKER ID`),
#   mturk_id=substring(`WORKER ID`,3)
# ) %>% filter(duplicate==TRUE,!is.na(mturk_id)) -> dup_workers
workers %>% filter(BATCH=="mtrack_loy 15") %>% pull(mturk_id) %>% duplicated() %>% any
View(dup_workers)
#########
#INCLUSION CONDITIONS
ppt_info %<>% mutate(
include_ppt = ifelse(total_trials>=55 &
crit_nonempty_trials>=10 &
att_check>=.5 &
p_clickprenoun_nonempty<=5 &
avg_clicktime>=200,"valid","invalid"),
duplicate = ifelse(mturk_id %in% dup_workers$mturk_id, "duplicate",
ifelse(!is.na(mturk_id),"n-dup","unknown"))
)
early_dups <- dup_workers %>% filter(grepl("GREENBERG|TWAIN",comments)) %>% pull(mturk_id)
ppt_info %>% group_by(mturk_id) %>%
summarise(
nppt_nums = n(),
pptnums = list(Participant),
pptnums_str = toString(Participant),
ppt_trials = toString(total_trials),
ppt_valid = toString(include_ppt),
ppt_first = min(which(total_trials>=30)),
valid_nums = Participant[ppt_first]
)
ppt_info %>% group_by(mturk_id) %>%
summarise(
nppt_nums = n(),
pptnums = list(Participant),
pptnums_str = toString(Participant),
ppt_trials = toString(total_trials),
ppt_valid = toString(include_ppt),
ppt_first = min(which(total_trials>=30)),
valid_nums = Participant[ppt_first]
) %>% filter(!is.na(mturk_id),nppt_nums>1) %>%
mutate(
valid_nums = ifelse(mturk_id %in% early_dups,NA,valid_nums)
)
ppt_info %>% group_by(mturk_id) %>%
summarise(
nppt_nums = n(),
pptnums = list(Participant),
pptnums_str = toString(Participant),
ppt_trials = toString(total_trials),
ppt_valid = toString(include_ppt),
ppt_first = min(which(total_trials>=30)),
valid_nums = Participant[ppt_first]
) %>% filter(!is.na(mturk_id),nppt_nums>1) %>%
mutate(
valid_nums = ifelse(mturk_id %in% early_dups,NA,valid_nums)
) -> first_of_dups
ppt_info %>% mutate(
duplicate2 = ifelse(duplicate=="duplicate" & Participant %in% first_of_dups$valid_nums,"n-dup",duplicate),
dup_incl = paste0(include_ppt," : ",duplicate2),
submitted = ifelse(is.na(mturk_id),NA,
ifelse(mturk_id %in% workers$mturk_id,"submitted","not submitted"))
) -> ppt_info
ppt_trial_info %<>% mutate(
include_trial = ifelse(datapoints!=0 &
clicked!="none" &
clicktime>=200 &
audio_played==1, "valid","invalid")
)
ppt_info %>% select(include_ppt) %>% table
require(plotly)
require(RColorBrewer)
ppt_info %>% filter(total_trials>=50) %>% mutate(
text = paste(
Participant,
mturk_id,paste0("<b>include:</b>",include_ppt),
paste0("<b>submitted:</b>",submitted),
paste0("<b>duplicate:</b>",duplicate2),
paste0("<b>p_earlyclick:</b>",p_clickprenoun_nonempty,"%"),
paste0("<b>av clicktime:</b>",avg_clicktime),
paste0("<b>total trials:</b>",total_trials),
paste0("<b>non empty crit trials:</b>",crit_nonempty_trials),
paste0("<b>att check:</b>",att_check),
paste0("<b>time taken:</b>",time_taken),
sep="<br>")
) %>% plot_ly(.,
x=~last_time,
y=~Participant,
type="scatter",
mode="markers",
color=~factor(dup_incl),
colors=brewer.pal(7,"Set1"),
marker = list(size = 10),
text=~text,
hoverinfo="text"
)
ppt_trial_info %>% filter(Participant %in%(203,207))
ppt_trial_info %>% filter(Participant %in%c(203,207))
ppt_trial_info %>% filter(Participant %in%c(203,207)) -> dd
View(dd)
ppt_trial_info %>% filter(Participant %in%c(203,207)) %>% ggplot(aes(x=clicktime))+geom_density()
ppt_trial_info %>% filter(Participant %in%c(203,207)) %>% ggplot(aes(x=clicktime,col=Participant))+geom_density()
ppt_trial_info %>% filter(Participant %in%c(203,207)) %>% ggplot(aes(x=clicktime,col=factor(Participant)))+geom_density()
tdat_binned %<>% filter(Condition!="Filler") %>%
left_join(.,ppt_info) %>% left_join(.,ppt_trial_info) #%>%
tdat %<>% filter(Condition!="Filler") %>%
left_join(.,ppt_info) %>% left_join(.,ppt_trial_info) #%>%
ppt_info %>% filter(include_ppt=="valid") %>%
mutate(
bilingual2 = fct_recode(factor(bilingual),
"Monolingual"="No",
"Monolingual"="No - Only English",
"Bilingual"="Yes - English and some other language",
"Non-native"="Yes - Some other language and not English",
"maybe"="Yes")
) %>% select(duplicate2, bilingual2) %>% table
######
#PLOT
########
tdat_binned %>% filter(include_ppt=="valid",include_trial=="valid",grepl("No",bilingual)) %>%
mutate(CURRENT_BIN = time/20,
referent=refprop,
distractor=disprop) %>%
make_tcplotdata(.,AOIs=c(referent,distractor),subj=Participant,Condition,duplicate2) %>%
mutate(
Object = fct_recode(AOI,"Distractor"="disprop","Referent"="refprop")
) %>%
tcplot(lty=Condition)+facet_wrap(~duplicate2)+
ylab("proportion cumulative movement towards objects")
#elog bias plot
tdat_binned %>%
filter(include_ppt=="valid",include_trial=="valid",duplicate2=="n-dup",grepl("No",bilingual)) %>%
mutate(
CURRENT_BIN=time/20,
Relog = log(refprop + .5/ (1 - refprop + .5)),
Delog = log(disprop + .5/ (1 - disprop + .5)),
elog_bias = Relog - Delog
) %>% make_tcplotdata(.,elog_bias,Participant,Condition) %>%
tcplot(lty=Condition)+ylim(-.5,1.5)+xlim(0,800)+
stat_smooth(method=lm,col="black",fill="grey30")+
NULL
tdat %>% group_by(Participant, Trial) %>%
summarise(
clicked=first(clicked),
condition=first(condition),
rt=first(rt)
) %>% group_by(condition) %>%
summarise(
refclicks=sum(clicked=="ref")/n(),
mean_rt=mean(rt,na.rm=T)
)
tdat %>% filter(include_ppt=="valid",include_trial=="valid",duplicate2=="n-dup",grepl("No",bilingual)) %>%
group_by(Participant, Trial) %>%
summarise(
clicked=first(clicked),
condition=first(condition),
rt=first(rt)
) %>% group_by(condition) %>%
summarise(
refclicks=sum(clicked=="ref")/n(),
mean_rt=mean(rt,na.rm=T)
)
names(object_clicks)
left_join(object_clicks,ppt_info) %>% left_join(.,ppt_trial_info) %>%
filter(clicked!="none",
rt>=200,
fluency!="Filler",
include_ppt=="valid",
duplicate2=="n-dup"
) %>% ungroup -> object_clicks
droplevels(object_clicks) -> object_clicks
object_clicks$fluency<-relevel(object_clicks$fluency,ref="Fluent")
contrasts(object_clicks$fluency)<-c(-.5,.5)
contrasts(object_clicks$clicked)
object_clicks %>% select(fluency,clicked) %>% table %>% print %>% prop.table(.,margin=1)
OC_model <- glmer(clicked~fluency+(1+fluency|Participant)+(1+fluency|Trial),object_clicks, family="binomial")
require(lme4)
OC_model <- glmer(clicked~fluency+(1+fluency|Participant)+(1+fluency|Trial),object_clicks, family="binomial")
summary(OC_model)
########
#MODEL
########
model.data <- tdat_binned %>%
filter(include_ppt=="valid",include_trial=="valid",duplicate2=="n-dup",grepl("No",bilingual)) %>%
mutate(
time_s = time/1000,
sub = Participant,
ref = Trial,
fluency = Condition,
Cref = refprop,
Cdis = disprop
) %>% filter(time_s<=0.8)
aggdat = with(model.data, aggregate(Cref~time_s*fluency*sub*ref, FUN=sum, na.rm=T))
aggdat$Cdis <- with(model.data, aggregate(Cdis~time_s*fluency*sub*ref, FUN=sum, na.rm=T))[,5]
aggdat$N <- 1
aggdat <- aggdat %>% mutate(
Relog = log(Cref + .5/ (N - Cref + .5)),
Delog = log(Cdis + .5/ (N - Cdis + .5)),
elog_bias = Relog - Delog,
C_difference = abs(Cref - Cdis),
wts =  1/(C_difference + .5) + 1/(N - C_difference + .5),
fluency = factor(fluency)
)
aggdat$fluency<-relevel(aggdat$fluency,ref="Fluent")
contrasts(aggdat$fluency)
contrasts(aggdat$fluency)<-c(-.5,.5)
model_mouse<-lmer(elog_bias~fluency*time_s+(1+fluency+time_s|sub)+(1|ref),aggdat)
summary(model_mouse)
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) %>% make_tcplotdata(.,c(elog_bias,fitted),sub,fluency) -> plotdat
ggplot(plotdat,aes(x=time,col=fluency,fill=fluency))+
geom_point(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
geom_ribbon(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(ymin=low,ymax=up),col=NA,alpha=0.2)+
geom_line(data=plotdat[grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
scale_colour_manual(values=c("#2171B5","#31A354"))+
scale_fill_manual(values=c("#2171B5","#31A354"))+
ylab("Empirical logit transformed movement bias toward\nreferent over distractor")+
xlab("Time (ms) relative to referent onset")+
theme_bw()+
#facet_wrap(~fluency)+
theme(text = element_text(size=16),legend.position = "bottom")+
ggtitle("Mouse movements")+
NULL
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
)
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) %>% gather(key="AOI",value="prop",c(elog_bias,fitted))
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) -> dd%>% gather(key="AOI",value="prop",c(elog_bias,fitted)) %>%
group_by(AOI,!!subj,...,!!bin) %>%
summarise(
meanaoi=mean(prop),
) %>% group_by(...,!!bin,AOI) %>%
summarise(
mean_prop=mean(meanaoi),
se=sd(meanaoi)/sqrt(n()),
low=mean_prop-se,
up=mean_prop+se
) %>% mutate(
time=!!bin*bin_interval
) %>% ungroup()
attr(dd$fitted)
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) -> dd
attr(dd$fitted)
dd$fitted
dd$fitted %>% summary
class(dd$fitted)
attributes(dd$fitted)
attributes(dd$fitted)
dd$fitted
head(attributes(dd$fitted))
ggplot(plotdat,aes(x=time,col=fluency,fill=fluency))+
geom_point(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
geom_ribbon(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(ymin=low,ymax=up),col=NA,alpha=0.2)+
geom_line(data=plotdat[grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
scale_colour_manual(values=c("#2171B5","#31A354"))+
scale_fill_manual(values=c("#2171B5","#31A354"))+
ylab("Empirical logit transformed movement bias toward\nreferent over distractor")+
xlab("Time (ms) relative to referent onset")+
theme_bw()+
#facet_wrap(~fluency)+
theme(text = element_text(size=16),legend.position = "bottom")+
ggtitle("Mouse movements")+
NULL
model_mouse<-lmer(elog_bias~fluency*time_s+(1+fluency+*ime_s|sub)+(1+time_s|ref),aggdat)
model_mouse<-lmer(elog_bias~fluency*time_s+(1+fluency*time_s|sub)+(1+time_s|ref),aggdat)
summary(model_mouse)
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) %>% make_tcplotdata(.,c(elog_bias,fitted),sub,fluency) -> plotdat
ggplot(plotdat,aes(x=time,col=fluency,fill=fluency))+
geom_point(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
geom_ribbon(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(ymin=low,ymax=up),col=NA,alpha=0.2)+
geom_line(data=plotdat[grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
scale_colour_manual(values=c("#2171B5","#31A354"))+
scale_fill_manual(values=c("#2171B5","#31A354"))+
ylab("Empirical logit transformed movement bias toward\nreferent over distractor")+
xlab("Time (ms) relative to referent onset")+
theme_bw()+
#facet_wrap(~fluency)+
theme(text = element_text(size=16),legend.position = "bottom")+
ggtitle("Mouse movements")+
NULL
summary(model_mouse)
contrasts(aggdat$fluency)
aggdat$fluency<-relevel(aggdat$fluency,ref="Fluent")
contrasts(aggdat$fluency)
contrasts(aggdat$fluency)[,1]<-c(-.5,.5)
aggdat = with(model.data, aggregate(Cref~time_s*fluency*sub*ref, FUN=sum, na.rm=T))
aggdat$Cdis <- with(model.data, aggregate(Cdis~time_s*fluency*sub*ref, FUN=sum, na.rm=T))[,5]
aggdat$N <- 1
aggdat <- aggdat %>% mutate(
Relog = log(Cref + .5/ (N - Cref + .5)),
Delog = log(Cdis + .5/ (N - Cdis + .5)),
elog_bias = Relog - Delog,
C_difference = abs(Cref - Cdis),
wts =  1/(C_difference + .5) + 1/(N - C_difference + .5),
fluency = factor(fluency),
time_z = scale(time_s)
)
aggdat$fluency<-relevel(aggdat$fluency,ref="Fluent")
contrasts(aggdat$fluency)[,1]<-c(-.5,.5)
model_mouse<-lmer(elog_bias~fluency*time_s+(1+fluency*time_s|sub)+(1+time_s|ref),aggdat)
summary(model_mouse)
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) %>% make_tcplotdata(.,c(elog_bias,fitted),sub,fluency) -> plotdat
ggplot(plotdat,aes(x=time,col=fluency,fill=fluency))+
geom_point(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
geom_ribbon(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(ymin=low,ymax=up),col=NA,alpha=0.2)+
geom_line(data=plotdat[grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
scale_colour_manual(values=c("#2171B5","#31A354"))+
scale_fill_manual(values=c("#2171B5","#31A354"))+
ylab("Empirical logit transformed movement bias toward\nreferent over distractor")+
xlab("Time (ms) relative to referent onset")+
theme_bw()+
#facet_wrap(~fluency)+
theme(text = element_text(size=16),legend.position = "bottom")+
ggtitle("Mouse movements")+
NULL
aggdat <- aggdat %>% mutate(
Relog = log(Cref + .5/ (N - Cref + .5)),
Delog = log(Cdis + .5/ (N - Cdis + .5)),
elog_bias = Relog - Delog,
C_difference = abs(Cref - Cdis),
wts =  1/(C_difference + .5) + 1/(N - C_difference + .5),
fluency = factor(fluency),
time_z = scale(time_s)[,1]
)
aggdat = with(model.data, aggregate(Cref~time_s*fluency*sub*ref, FUN=sum, na.rm=T))
aggdat$Cdis <- with(model.data, aggregate(Cdis~time_s*fluency*sub*ref, FUN=sum, na.rm=T))[,5]
aggdat$N <- 1
aggdat <- aggdat %>% mutate(
Relog = log(Cref + .5/ (N - Cref + .5)),
Delog = log(Cdis + .5/ (N - Cdis + .5)),
elog_bias = Relog - Delog,
C_difference = abs(Cref - Cdis),
wts =  1/(C_difference + .5) + 1/(N - C_difference + .5),
fluency = factor(fluency),
time_z = scale(time_s)[,1]
)
summary(aggdat$time_z)
attributes(aggdat$time_z)
aggdat$time_z
aggdat = with(model.data, aggregate(Cref~time_s*fluency*sub*ref, FUN=sum, na.rm=T))
aggdat$Cdis <- with(model.data, aggregate(Cdis~time_s*fluency*sub*ref, FUN=sum, na.rm=T))[,5]
aggdat$N <- 1
aggdat <- aggdat %>% mutate(
Relog = log(Cref + .5/ (N - Cref + .5)),
Delog = log(Cdis + .5/ (N - Cdis + .5)),
elog_bias = Relog - Delog,
C_difference = abs(Cref - Cdis),
wts =  1/(C_difference + .5) + 1/(N - C_difference + .5),
fluency = factor(fluency),
time_z = scale(time_s)[,1]
)
aggdat$fluency<-relevel(aggdat$fluency,ref="Fluent")
contrasts(aggdat$fluency)[,1]<-c(-.5,.5)
model_mouse<-lmer(elog_bias~fluency*time_s+(1+fluency*time_s|sub)+(1+time_s|ref),aggdat)
summary(model_mouse)
aggdat %>% mutate(
CURRENT_BIN = time_s/0.02,
fitted=fitted(model_mouse)
) %>% make_tcplotdata(.,c(elog_bias,fitted),sub,fluency) -> plotdat
ggplot(plotdat,aes(x=time,col=fluency,fill=fluency))+
geom_point(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
geom_ribbon(data=plotdat[!grepl("fitted",plotdat$AOI),],aes(ymin=low,ymax=up),col=NA,alpha=0.2)+
geom_line(data=plotdat[grepl("fitted",plotdat$AOI),],aes(y=mean_prop))+
scale_colour_manual(values=c("#2171B5","#31A354"))+
scale_fill_manual(values=c("#2171B5","#31A354"))+
ylab("Empirical logit transformed movement bias toward\nreferent over distractor")+
xlab("Time (ms) relative to referent onset")+
theme_bw()+
#facet_wrap(~fluency)+
theme(text = element_text(size=16),legend.position = "bottom")+
ggtitle("Mouse movements")+
NULL
